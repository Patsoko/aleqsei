Aleqsei is a module that provides a Python-callable API for the
[Aqsis](http://www.aqsis.org/index.html) renderer. For the most part,
calls to methods in this module will generate corresponding RenderMan
statements, saved to files in a temporary working directory. The Aqsis
binaries are invoked in subprocesses to render these files, and the
output images are collected in another part of the work area. These
are then retrieved and converted to PNG streams, that you can save to
your own files or otherwise process further.

## Basic Concepts ##

After importing the `aleqsei` module, you start by creating a
`Context` object, e.g.:

    ctx = aleqsei.Context()

This will manage the temporary working directory, and collect shader
definitions, RIB streams and other ancillary files. After rendering
has finished, you can retrieve the output images from here, e.g.
assuming a single output image:

    out = open("out.png", "wb")
    out.write(ctx.images[0])
    out.close()

## First Steps ##

Let us recreate the first stage in the example
[_Your First Steps With Aqsis_](http://www.aqsis.org/documentation/tutorials/first_steps.html)
from the Aqsis documentation.

    ctx = aleqsei.Context()

Start creating a new RIB stream. Instead of specifying explicit
parameters for a `Display` statement, let Aleqsei generate one for you
automatically:

    ri = ctx.new_rib(display = aleqsei.DISPLAY.AUTO)

Aleqsei allows the use of Python _context managers_ to keep track
of various _xxx_`Begin`/_xxx_`End` statement pairs for you, so you donâ€™t
have to. So instead of using `ri.frame_begin()` and `ri.frame_end()`
calls, it is easier to do this:

    with ri.frame_context(1) :

The frame parameters correspond one-to-one with the RIB
statements in the example:

        ri.format(640, 480, -1)
        ri.shading_rate(1)
        ri.projection("perspective", fov = [30])
        ri.frame_aspect_ratio(1.33)
        ri.identity()
        # Default distant headlight
        ri.light_source("distantlight", 1)
        # Camera transformation
        ri.translate(0, 0, 5)

Instead of doing `ri.world_begin()`, which would necessitate
a corresponding `ri.world_end()`, use the appropriate
context-manager call:

        with ri.world_context() :
            ri.identity()

Another with-statement instead of `ri.attribute_begin()`/`ri.attribute_end()`:

            with ri.attribute_context() :
                ri.colour(1, 0.6, 0) # A nice orange colour
                ri.surface("plastic", Ka = [1], Kd = [0.5], Ks = 1, roughness = 0.1)

Context-manager substitute for `ri.transform_begin()`/`ri.transform_end()`:

                with ri.transform_context() :
                    ri.rotate(90, 1, 0, 0)
                      # Make +z point "up". The default camera coordinate system has
                    ri.sphere(1, -1, 1, 360)
                      # +y up, but the Sphere primitive has its poles on the z axis.

End the transform, attribute, world and frame contexts:

                #end with
            #end with
        #end with
    #end with

Now that we have finished creating the RIB stream, rendering
will start here:

    ri.close()

Once this call returns, the output is ready, so save it:

    out = open("out.png", "wb")
    out.write(ctx.images[0])
    out.close()

## Other Inputs ##

Shader definitions are input in source form. For example, the
`simple_surface` shader used in a later part of the _Your First Steps
With Aqsis_ example can be loaded into the context as follows:

    s = ctx.new_shader("simple_surface")
    s.write \
          (
            "// A very simple SL surface shader\n"
            "surface simple_surface() {\n"
            "  color Cd = noise(10*P);\n"
            "  Ci = Cd * diffuse(N);\n"
            "}\n"
          )
    s.close()

Alternatively, you can use method chaining:

    (ctx.new_shader("simple_surface")
        .write
          (
            "// A very simple SL surface shader\n"
            "surface simple_surface() {\n"
            "  color Cd = noise(10*P);\n"
            "  Ci = Cd * diffuse(N);\n"
            "}\n"
          )
        .close()
    )

RIB source can also be supplied in a similar way, as an alternative to
making the method-call equivalents to the RIB statements as was done
above.

## Running Existing Aqsis Source Files ##

If you want to render existing `.rib` and `.sl` source files, like the
examples that Aqsis itself comes with, that is easy enough to do. For
instance, the famous Cornell box scene could be rendered like this,
setting up an appropriate search path using the usual Aqsis syntax, so
the files can find each other:

    ctx = aleqsei.Context()
    ctx.set_search_path \
      (
        aleqsei.SEARCH_TYPE.RESOURCE,
        "&:/usr/share/aqsis/examples/point_based_gi/cornellbox/"
      )
    ctx.compile_shader_file("ao.sl")
    ctx.compile_shader_file("bake_points.sl")
    ctx.compile_shader_file("indirect.sl")
    ctx.compile_rib_file("all_passes.rib", aleqsei.DISPLAY.ALL)

and then writing out `ctx.images[0]` as a PNG file as before.

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2020 February 4
